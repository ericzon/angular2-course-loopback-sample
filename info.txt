Marc Torruella
192.168.110.120

Loopback
Generador de servicios (apis)

LoopBackConfig

npm run sdk


_Change detection_

Default: entra hijo por hijo para ver si alguno de los campos ha cambiado.
OnPush: "no hace falta q mires los hijos." Si el objeto es el mismo no hace falta q se entre. Si es obj es nuevo, lo detecta.


changeDetection: ChangeDetectionStrategy.OnPush

Crea un componente_ChangeDetector, ZoneJs le avisa de si hay cambios en la sección.

_ZoneJs_

Mockea los eventos del browser para tener un registro de cambios en las zonas

Ejemplo dnd se activa / desactiva la escucha de eventos en una zona
http://plnkr.co/edit/d3KGMh?p=preview

_Directives_

- De componente
- Estructurales: if, for
- De atributo

Host listener: padre del listener, puede ser en un template o en una class
Tb permite decirle que escuche en todo el documento, con: document:click

ElementRef: nos da acceso al elemento del DOM

HostBinding: permite manipular atributos del host

Context variables:
https://angular-2-training-book.rangle.io/handout/advanced-angular/directives/providing_context_variables_to_directives.html

_AoT_

JiT vs AoT

Se hace al generar el build (--prod)
TreeShaking
Es experimental aún. Rangle ha hecho una lista para poder ver los errores conocidos

2 maneras de uso. con el compilador de Angular o con los ngtools de webpack

private -> public


_Inmutable_

Conceptos en Inmutable:

Son punteros:

Map -> Object
Array -> List

Son valores:

Boolean
Number
String
Symbol
Null
Undefind

.merge -> Inmutable crea un objeto nuevo a partir de mezclar 2

Inmutable.fromJS se pase toda la profundidad del objeto y lo hace realmente inmutable

Tiene penalización en memoria punteros

Para casos críticos, de estructuras que se van a modificar mucho. Se harán sobre una mutable y cuando termine se pasará a una inmutable "withMutation"


_Inmutability vs Encapsulation_

https://vsavkin.com/immutability-vs-encapsulation-90549ab74487








